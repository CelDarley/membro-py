"""create users_py

Revision ID: 30f5ad6f47ee
Revises: 658ce5763d5f
Create Date: 2025-08-22 06:19:28.865233

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '30f5ad6f47ee'
down_revision = '658ce5763d5f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users_py',
    sa.Column('id', mysql.BIGINT(unsigned=True), nullable=False),
    sa.Column('name', sa.String(length=191), nullable=False),
    sa.Column('email', sa.String(length=191), nullable=False),
    sa.Column('password_hash', sa.String(length=191), nullable=False),
    sa.Column('role', sa.String(length=32), nullable=False),
    sa.Column('two_factor_enabled', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('users_email_unique'))
        batch_op.drop_index(batch_op.f('users_google_id_unique'))

    op.drop_table('users')
    with op.batch_alter_table('membro_amigos', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('membro_amigos_amigo_id_foreign'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('membro_amigos_membro_id_foreign'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'membros', ['amigo_id'], ['id'])
        batch_op.create_foreign_key(None, 'membros', ['membro_id'], ['id'])
        batch_op.drop_column('created_at')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('membros', schema=None) as batch_op:
        batch_op.alter_column('nome',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               nullable=True)
        batch_op.alter_column('sexo',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.alter_column('concurso',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.alter_column('telefone_unidade',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('telefone_celular',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.drop_index(batch_op.f('membros_cargo_efetivo_index'))
        batch_op.drop_index(batch_op.f('membros_comarca_lotacao_index'))
        batch_op.drop_index(batch_op.f('membros_nome_index'))
        batch_op.create_index(batch_op.f('ix_membros_nome'), ['nome'], unique=False)
        batch_op.drop_column('created_at')
        batch_op.drop_column('updated_at')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('membros', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True))
        batch_op.add_column(sa.Column('created_at', mysql.TIMESTAMP(), nullable=True))
        batch_op.drop_index(batch_op.f('ix_membros_nome'))
        batch_op.create_index(batch_op.f('membros_nome_index'), ['nome'], unique=False)
        batch_op.create_index(batch_op.f('membros_comarca_lotacao_index'), ['comarca_lotacao'], unique=False)
        batch_op.create_index(batch_op.f('membros_cargo_efetivo_index'), ['cargo_efetivo'], unique=False)
        batch_op.alter_column('telefone_celular',
               existing_type=sa.String(length=100),
               type_=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               existing_nullable=True)
        batch_op.alter_column('telefone_unidade',
               existing_type=sa.String(length=100),
               type_=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               existing_nullable=True)
        batch_op.alter_column('concurso',
               existing_type=sa.String(length=50),
               type_=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               existing_nullable=True)
        batch_op.alter_column('sexo',
               existing_type=sa.String(length=50),
               type_=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               existing_nullable=True)
        batch_op.alter_column('nome',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255),
               nullable=False)

    with op.batch_alter_table('membro_amigos', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True))
        batch_op.add_column(sa.Column('created_at', mysql.TIMESTAMP(), nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('membro_amigos_membro_id_foreign'), 'membros', ['membro_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(batch_op.f('membro_amigos_amigo_id_foreign'), 'membros', ['amigo_id'], ['id'], ondelete='CASCADE')

    op.create_table('users',
    sa.Column('id', mysql.BIGINT(unsigned=True), autoincrement=True, nullable=False),
    sa.Column('name', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255), nullable=False),
    sa.Column('email', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255), nullable=False),
    sa.Column('phone', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255), nullable=True),
    sa.Column('google_id', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255), nullable=True),
    sa.Column('avatar', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255), nullable=True),
    sa.Column('email_verified_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('password', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=255), nullable=False),
    sa.Column('role', mysql.ENUM('admin', 'user'), server_default=sa.text("'user'"), nullable=False),
    sa.Column('remember_token', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100), nullable=True),
    sa.Column('two_factor_enabled', mysql.TINYINT(display_width=1), server_default=sa.text("'1'"), autoincrement=False, nullable=False),
    sa.Column('two_factor_code', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=10), nullable=True),
    sa.Column('two_factor_expires_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('created_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('users_google_id_unique'), ['google_id'], unique=True)
        batch_op.create_index(batch_op.f('users_email_unique'), ['email'], unique=True)

    op.drop_table('users_py')
    # ### end Alembic commands ###
